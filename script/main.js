// ---- MODO CLARO / MODO OSCURO ---- //

// Se declaran la variables necesarias para utilizar luego en la funci칩n y poder agregarles el evento o clase y quede lo m치s organizado, prolijo y lejible posible:
let btnModo = document.getElementById("modo");
let body = document.body;
let modo_oscuro = localStorage.getItem("modo_oscuro");

//Creo una funci칩n a partir del evento "click" que ejecute el cambio de un modo al otro (por medio de un control de flujo) y guarde en el Local Storage el valor de si est치 activado o no. Adem치s, cambia el 칤cono de la luna y el sol, seg칰n el modo a activar.
btnModo.addEventListener("click", () => {
  body.classList.toggle("modo_oscuro");

  if (body.classList.contains("modo_oscuro")) {
    btnModo.innerHTML =
      '<i class="fa-regular fa-sun" style="color: #ffffff;"></i>';
    localStorage.setItem("modo_oscuro", "activado");
  } else {
    btnModo.innerHTML =
      '<i class="fa-regular fa-moon" style="color: #ffffff;"></i>';
    localStorage.setItem("modo_oscuro", "desactivado");
  }
});

//Por 칰ltimo, y por fuera de la funci칩n, ejecuto un flujo que permita guardar en que modo dej칩 su usuario el sitio, la 칰ltima vez que lo us칩 (cambi칠 el if else por un operador ternario, para optimizar y simplificar el c칩digo... aunque a칰n me estoy acostumbrando)
body.className = modo_oscuro === "activado" ? "modo_oscuro" : "";

// ------- ******* soy un separador******* ------- //

// ---- CONSULTA POR GRUPO IDEAL ---- //

// Grupos de Aikido con sus edades m칤nimas y m치ximas correspondientes.
const GRUPOS_AIKIDO = [
  { grupo: "Aikido Kids", edadMin: 4, edadMax: 11 },
  { grupo: "Adolescentes", edadMin: 12, edadMax: 17 },
  { grupo: "Adultos", edadMin: 18, edadMax: 69 },
  { grupo: "Adultos mayores", edadMin: 70, edadMax: Infinity },
];

//Declaro la funci칩n que mostrar치 la respuesta en el alert
function mostrarRespuesta(respuesta) {
  Swal.fire({
    icon: "success",
    title: "Resultado",
    text: respuesta,
    background: "rgba(86,86,86)",
    color: "#fff",
    confirmButtonColor: "rgb(47, 66, 60)",
   });
}

// Funci칩n flecha que muestra el alert, permitiendo al usuario ingresar la edad.
function mostrarError() {
  Swal.fire({
    icon: "error",
    title: "춰Esperemos un poquito m치s! 游땕",
    text: '"La edad m칤nima para comenzar es de 4 a침os..."',
    background: "rgba(86,86,86)",
    color: "#fff",
    confirmButtonColor: "rgb(47, 66, 60)",
  });
}

function mostrarAlerta() {
  Swal.fire(
    {
      title: "Ingresa la edad",
      input: "number",
      inputLabel: "A침os:",
      background: "rgba(86,86,86)",
      color: "#fff",
      confirmButtonColor: "rgb(47, 66, 60)",
      inputAttributes: {
        min: 1,
        max: Infinity,
        step: 1,
      },
      inputValue: 1,
      showCancelButton: true,
      confirmButtonText: "Consultar",
      cancelButtonText: "Cancelar",
      showLoaderOnConfirm: true,
      //Aplicando el concepto de AJAX, con la funci칩n del SwetAlert2, para obtener la edad ingresada en un n춿 entero.
      preConfirm: (value) => {
        const edadAlumno = parseInt(value);
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve(edadAlumno);
          }, 500);
        });
      },
    }
    //Se utiliza una promesa para devolver la respuesta.
  ).then((result) => {
    if (result.isConfirmed) {
      const edadAlumno = result.value;
      const grupo = grupoAikido(edadAlumno);
      if (grupo === "Menor de 4 a침os") {
        mostrarError();
      } else {
        mostrarRespuesta(grupo);
      }
    }
  });
}

//Luego declaro la <funci칩n> que engloba los distintos grupos, seg칰n la edad--> condicional.
function grupoAikido(edad) {
  //Se declara una constante que utiliza una funci칩n de orden superior para encontrar cada objeto en el array.
  const grupo = GRUPOS_AIKIDO.find(
    (g) => g.edadMin <= edad && edad <= g.edadMax
  );

  //Utilizo un <switch> para dividir los grupos. De acuerdo a la edad, devuelve el mensaje correspondiente.
  switch (grupo) {
    case GRUPOS_AIKIDO[0]:
      return "Le corresponde el horario de Aikido Kids (revisar grilla 游녡 ).";
    case GRUPOS_AIKIDO[1]:
      return "Le corresponde el horario de Adultos (revisar grilla 游녡 ), pero te recomendamos el horario de - lun, mie y vie a las 19:30hs - , ya que hay un buen grupo de adolescentes practicando ah칤 游녨";
    case GRUPOS_AIKIDO[2]:
      return "Le corresponde el horario de Adultos (revisar grilla 游녡 ).";
    case GRUPOS_AIKIDO[3]:
      return "Le corresponde el horario de Adultos (revisar grilla 游녡 ). Por cierto: no hay edad m치xima para comenzar 춰Te esperamos!游땔";
    default:
      return "Menor de 4 a침os";
  }
}



//Primero conecto el boton consulta del HTML, tray칠ndolo con su ID, con la variable botonConsulta, y luego le agrego el evento click, conect치ndola con la funci칩n mostrarAlerta, para que se ejecute al usuario hacer el click correspondiente.
const botonConsulta = document.getElementById("boton_consulta");
botonConsulta.addEventListener("click", mostrarAlerta);
