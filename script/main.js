// ---- MODO CLARO / MODO OSCURO ---- //

// Se declaran la variables necesarias para utilizar luego en la funci칩n y poder agregarles el evento o clase y quede lo m치s organizado, prolijo y lejible posible:
let btnModo = document.getElementById("modo");
let body = document.body;
let modo_oscuro = localStorage.getItem("modo_oscuro");

//Creo una funci칩n a partir del evento "click" que ejecute el cambio de un modo al otro (por medio de un control de flujo) y guarde en el Local Storage el valor de si est치 activado o no. Adem치s, cambia el 칤cono de la luna y el sol, seg칰n el modo a activar.
btnModo.addEventListener("click", () => {
  body.classList.toggle("modo_oscuro");

  if (body.classList.contains("modo_oscuro")) {
    btnModo.innerHTML =
      "<img src='./assets/iconSol.svg' alt='Icono para pasar a modo claro'>";
    localStorage.setItem("modo_oscuro", "activado");
  } else {
    btnModo.innerHTML =
      "<img src='./assets/iconLuna.svg' alt='Icono para pasar a modo oscuro'>";
    localStorage.setItem("modo_oscuro", "desactivado");
  }
});

//Por 칰ltimo, y por fuera de la funci칩n, ejecuto un flujo que permita guardar en que modo dej칩 su usuario el sitio, la 칰ltima vez que lo us칩 (cambi칠 el if else por un operador ternario, para optimizar y simplificar el c칩digo... aunque a칰n me estoy acostumbrando)
body.className = modo_oscuro === "activado" ? "modo_oscuro" : "";



// ------- ******* soy un separador******* ------- //



// ---- CONSULTA POR GRUPO IDEAL ---- //


// Grupos de Aikido con sus edades m칤nimas y m치ximas correspondientes.
const GRUPOS_AIKIDO = [
  { grupo: "Aikido Kids", edadMin: 4, edadMax: 11 },
  { grupo: "Adolescentes", edadMin: 12, edadMax: 17 },
  { grupo: "Adultos", edadMin: 18, edadMax: 69 },
  { grupo: "Adultos mayores", edadMin: 70, edadMax: Infinity },
];

//Luego declaro la <funci칩n> que engloba los distintos grupos, seg칰n la edad--> condicional.
function grupoAikido(edad) {
  //Se declara una constante que utiliza una funci칩n de orden superior para encontrar cada objeto en el array.
  const grupo = GRUPOS_AIKIDO.find(
    (g) => g.edadMin <= edad && edad <= g.edadMax
  );

  //Utilizo un <switch> para dividir los grupos. De acuerdo a la edad, devuelve el mensaje correspondiente.
  switch (grupo) {
    case GRUPOS_AIKIDO[0]:
      return("Le corresponde el horario de Aikido Kids (revisar grilla 游녡 ).");
    case GRUPOS_AIKIDO[1]:
      return("Le corresponde el horario de Adultos (revisar grilla 游녡 ), pero te recomendamos el horario de - lun, mie y vie a las 19:30hs - , ya que hay un buen grupo de adolescentes practicando ah칤 游녨"
      );
    case GRUPOS_AIKIDO[2]:
      return("Le corresponde el horario de Adultos (revisar grilla 游녡 ).");
    case GRUPOS_AIKIDO[3]:
      return("Le corresponde el horario de Adultos (revisar grilla 游녡 ). Por cierto: no hay edad m치xima para comenzar 춰Te esperamos!游땔"
      );
    default:
      return("La edad m칤nima para comenzar es de 4 a침os... 춰Esperemos un poquito m치s! 游땕"
      );
  }
}

//Declaraci칩n de las constantes y su conexi칩n con los elementos del HTML.
const botonConsulta = document.getElementById("boton_consulta");
const respuesta = document.getElementById("respuesta_consulta");

//Ahora conecto el boton de la consulta con el evento click, dentro declaro la variable edadAlumno con el id del input por donde ingresa el valor el usuario. Me aseguro que ingrese un dato v치lido y luego llamo a la funci칩n y doy la respuesta en el lugar correspondiente.
botonConsulta.addEventListener("click", () => {
  let edadAlumno = document.getElementById("edadAlumno").value;

  if (isNaN(edadAlumno) || edadAlumno.trim() === "") {
    respuesta.textContent = "Por favor, ingrese una edad v치lida.";
    return;
  }

  const grupo = grupoAikido(parseInt(edadAlumno));
  respuesta.textContent = grupo;
});



